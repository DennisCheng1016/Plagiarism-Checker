openapi: 3.0.0
info:
  title: SC Plagiarism API
  contact: {}
  version: '1.0'
servers:
  - url: https://sc-plagiarism-checker.herokuapp.com
    variables: {}
paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register
      operationId: Register
      parameters: []
      requestBody:
        description: 'Password must be at least 6 characters'
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/RegisterRequest'
                - example:
                    username: test
                    password: '123123'
                    email: test@gmail.com
                    role: 'student'
            example:
              username: test
              password: '123123'
              email: test@gmail.com
              role: 'student'
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security: []
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login
      operationId: Login
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/LoginRequest'
                - example:
                    email: test@gmail.com
                    password: '123456'
            example:
              email: test@gmail.com
              password: '123456'
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security: []
  /auth/recoverEmail:
    post:
      tags:
        - Auth
      summary: send recover email
      operationId: recover
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/recoverEmail'
                - example:
                    email: test@gmail.com
            example:
              email: test@gmail.com
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security: []
  /user/resetPassword:
    post:
      tags:
        - Account
      summary: user reset password
      operationId: resetPassword
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/resetPassword'
                - example:
                    password: '123123'
            example:
              password: '123123'
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
  /user/getUser/:
    get:
      tags:
        - Account
      summary: Get user info by token
      operationId: GetUserInfoByToken
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
  /subject/:
    get:
      tags:
        - Subject
      summary: Get subject list
      operationId: Getsubjectlist
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
    post:
      tags:
        - Subject
      summary: Student add subject
      operationId: Addsubject
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/AddsubjectRequest'
                - example:
                    subjectCode: 'testsubjectCode'
            example:
              subjectCode: 'testsubjectCode'
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
  /subject/admin/:
    get:
      tags:
        - Subject
      summary: Get all subjects list
      operationId: Getallsubjectlist
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
    post:
      tags:
        - Subject
      summary: Create subject
      operationId: Createsubject
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/CreatesubjectRequest'
                - example:
                    subjectCode: 'testsubjectCode'
                    subjectName: 'testSubjectName'
                    teachers: ['teacher1@gmail.com']
            example:
              subjectCode: 'testsubjectCode'
              subjectName: 'testSubjectName'
              teachers: ['teacher1@gmail.com']
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
  /subject/admin/{id}:
    patch:
      tags:
        - Subject
      summary: Update subject
      operationId: Updatesubject
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The subject ID
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/UpdatesubjectRequest'
                - example:
                    subjectCode: 'updateTestsubjectCode'
                    subjectName: 'updateTestSubjectName'
                    teachers: ['teacher2@gmail.com']
            example:
              subjectCode: 'updateTestsubjectCode'
              subjectName: 'updateTestSubjectName'
              teachers: ['teacher2@gmail.com']
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
    delete:
      tags:
        - Subject
      summary: Delete subject
      operationId: Deletesubject
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The subject ID
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
  /assignment/{id}:
    get:
      tags:
        - Assignment
      summary: Get assignment list
      operationId: Getassignmentlist
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The subject ID
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
    post:
      tags:
        - Assignment
      summary: Create assignment
      operationId: Createassignment
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The subject ID
      requestBody:
        description: 'assignmentName is required'
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/CreateassignmentRequest'
                - example:
                    assignmentName: 'testAssignmentName'
                    dueDate: '2022-12-12'
                    threshold: 10
                    maxCheckTimes: 3
            example:
              assignmentName: 'testAssignmentName'
              dueDate: '2022-12-12'
              threshold: 10
              maxCheckTimes: 3
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
    patch:
      tags:
        - Assignment
      summary: Update assignment
      operationId: Updateassignment
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The assignment ID
      requestBody:
        description: 'assignmentName is required'
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/UpdateassignmentRequest'
                - example:
                    assignmentName: 'updateTestAssignmentName'
                    dueDate: '2022-12-13'
                    threshold: 3
                    maxCheckTimes: 10
            example:
              assignmentName: 'updateTestAssignmentName'
              dueDate: '2022-12-12'
              threshold: 3
              maxCheckTimes: 10
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
    delete:
      tags:
        - Assignment
      summary: Delete assignment
      operationId: Deleteassignment
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The assignment ID
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
  /assignment/dataset/{id}:
    patch:
      tags:
        - Assignment
      summary: Set datasets
      operationId: Setdatasets
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The assignment ID
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/SetdatasetsRequest'
                - example:
                    setDatasets: ['datasetId']
            example:
              setDatasets: ['datasetId']
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
  /dataset/{id}:
    get:
      tags:
        - Dataset
      summary: Get dataset list
      operationId: Getdatasetlist
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The assignment ID
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
    post:
      tags:
        - Dataset
      summary: Create dataset
      operationId: Createdataset
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The assignment ID
      requestBody:
        description: 'datasetName and fileType are required'
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/CreatedatasetRequest'
                - example:
                    datasetName: 'testDatasetName'
                    fileType: 'pdf'
            example:
              datasetName: 'testDatasetName'
              fileType: 'pdf'
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
    patch:
      tags:
        - Dataset
      summary: Update assignment
      operationId: Updatedataset
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The dataset ID
      requestBody:
        description: 'datasetName and fileType are required'
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/UpdatedatasetRequest'
                - example:
                    datasetName: 'updateTestDatasetName'
                    fileType: 'pdf'
            example:
              datasetName: 'updatetTestDatasetName'
              fileType: 'pdf'
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
    delete:
      tags:
        - Dataset
      summary: Delete dataset
      operationId: Deletedataset
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The dataset ID
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
  /buffer/{id}:
    get:
      tags:
        - Buffer
      summary: Get buffer list
      operationId: Getbufferlist
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The assignment ID
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
    post:
      tags:
        - Buffer
      summary: Upload file
      operationId: Uploadfile
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The assignment ID
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
    delete:
      tags:
        - Buffer
      summary: Delete file
      operationId: Deletefile
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The file ID
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
  /result/list/{id}:
    get:
      tags:
        - Result
      summary: Get a result list of an assignment
      operationId: getResultList
      parameters: 
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The assignment ID
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
  /result/{id}:
    get:
      tags:
        - Result
      summary: Get a detail info of a result
      operationId: getResultDetail
      parameters: 
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The result ID
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
  /result/dataset:
    post:
      tags:
        - Result
      summary: Save results to datasets
      operationId: saveResultsToHistorical
      parameters: []
      requestBody:
        description: 'results, datasets and grade are required'
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/saveResultsToHistorical'
                - example:
                    results: ['6346601f1ecfcdf26b46825d', '6346601f1ecfcdf26b46825f']
                    datasets: ['6345cda0beb454ed03853cc9']
                    grade: 'passed'
            example:
              results: ['6346601f1ecfcdf26b46825d', '6346601f1ecfcdf26b46825f']
              datasets: ['6345cda0beb454ed03853cc9']
              grade: 'passed'
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
  /check:
    post:
      tags:
        - Checker
      summary: Post check configuration and initiate checking
      operationId: postCheckConfig
      parameters: []
      requestBody:
        description: 'assignmentId, fileType, granularity and datasets are required'
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/postCheckConfig'
                - example:
                    assignmentId: 63459bfb91cf355a962cea18
                    fileType: c
                    granularity: 10
                    datasets: ['6345cda0beb454ed03853cc9']
            example:
              assignmentId: 63459bfb91cf355a962cea18
              fileType: c
              granularity: 10
              datasets: ['6345cda0beb454ed03853cc9']
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
  /admin/getAllUser:
    get:
      tags:
        - Admin
      summary: Get all user with their infomation
      operationId: getAllUser
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
  /admin/getAllPermission:
    get:
      tags:
        - Admin
      summary: Get all permission (teachers' email whitelist)
      operationId: getAllPermission
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
  /admin/updateUserAccount:
    post:
      tags:
        - Admin
      summary: Update a user's account
      operationId: updateUserAccount
      parameters: []
      requestBody:
        description: 'update can contain username/accountStatus/subjects, accountStatus could be active/disabled'
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/updateUserAccount'
                - example:
                    userEmail: 'test@gmail.com'
                    update: { username: 'ron', accountStatus: 'disable'}
            example:
              userEmail: 'test@gmail.com'
              update: { username: 'ron',accountStatus: 'disable'}
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
  /admin/permitTeacherRegistration:
    post:
      tags:
        - Admin
      summary: Permit teacher registration
      operationId: permitTeacherRegistration
      parameters: []
      requestBody:
        description: 'add a teachers email to whitelist'
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/permitTeacherRegistration'
                - example:
                    email: 'test@gmail.com'
            example:
              email: 'test@gmail.com'
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
        - bearer: []
components:
  schemas:
    RegisterRequest:
      title: Register Request
      required:
        - username
        - password
        - email
        - role
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        email:
          type: string
        role:
          type: string
      example:
        username: test
        password: '123123'
        email: test@gmail.com
        role: student
    LoginRequest:
      title: Login Request
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: test@gmail.com
        password: '123123'
    recoverEmail:
      title: Recover email Request
      required:
        - email
      type: object
      properties:
        email:
          type: string
      example:
        email: test@gmail.com
    resetPassword:
      title: Reset password Request
      required:
        - password
      type: object
      properties:
        password:
          type: string
      example:
        password:'123123'
    AddsubjectRequest:
      title: Student Add Subject Request
      required:
        - subjectCode
      type: object
      properties:
        subjectCode:
          type: string
      example:
        subjectCode: testSubjectCode
    CreatesubjectRequest:
      title: Create Subject Request
      required:
        - subjectCode
        - subjectName
      type: object
      properties:
        subjectCode:
          type: string
        subjectName:
          type: string
        teachers:
          type: array
          items:
            type: string
      example:
        subjectCode: testSubjectCode
        subjectName: testSubjectName
        teachers: ['teacher1@gmail']
    UpdatesubjectRequest:
      title: Update Subject Request
      required:
        - subjectCode
        - subjectName
      type: object
      properties:
        subjectCode:
          type: string
        subjectName:
          type: string
        teachers:
          type: array
          items:
            type: string
      example:
        subjectCode: updateTestSubjectCode
        subjectName: updateTestSubjectName
        teachers: ['teacher2@gmail']
    CreateassignmentRequest:
      title: Create Assignment Request
      required:
        - assignmentName
      type: object
      properties:
        assignmentName:
          type: string
        dueDate:
          type: string
        threshold:
          type: number
        maxCheckTimes:
          type: number
      example:
        assignmentName: testAssignmentName
        dueDate: XXXX-YY-ZZ
        threshold: 10
        maxCheckTimes: 3
    UpdateassignmentRequest:
      title: Update Assignment Request
      required:
        - assignmentName
      type: object
      properties:
        assignmentName:
          type: string
        dueDate:
          type: string
        threshold:
          type: number
        maxCheckTimes:
          type: number
      example:
        assignmentName: UpdateTestAssignmentName
        dueDate: XXXX-YY-ZZ
        threshold: 3
        maxCheckTimes: 10
    CreatedatasetRequest:
      title: Create Dataset Request
      required:
        - datasetName
        - fileType
      type: object
      properties:
        datasetName:
          type: string
        fileType:
          type: string
      example:
        datasetName: testDatasetName
        fileType: pdf
    UpdatedatasetRequest:
      title: Update Dataset Request
      required:
        - datasetName
        - fileType
      type: object
      properties:
        datasetName:
          type: string
        fileType:
          type: string
      example:
        datasetName: UpdateTestDatasetName
        fileType: java
    SetdatasetsRequest:
      title: Set Datasets Request
      type: object
      properties:
        setDatasets:
          type: array
          items:
            type: string
      example:
        setDatasets: ['datasetId']
    saveResultsToHistorical:
      title: save results to historicals
      required:
        - results
        - datasets
        - grade
      type: object
      properties:
        results: 
          type: array
          items:
            type: string
        datasets: 
          type: array
          items:
            type: string
        grade:
          type: string
    postCheckConfig:
      title: Post Check configuration and intiate checking
      required:
        - assignmentId
        - fileType
        - granularity
        - datasets
      type: object
      properties:
        assignmentId:
          type: string
        fileType:
          type: string
        granularity:
          type: string
        datasets:
          type: array
          items: 
            type: string
      example:
        assignmentId: 63459bfb91cf355a962cea18
        fileType: c
        granularity: 10
        datasets: ['6345cda0beb454ed03853cc9']
    updateUserAccount:
      title: Update User Account
      required:
        - userEmail
        - update
      type: object
      properties:
        userEmail:
          type: string
        update:
          type: object
          properties:
            accountStatus:
              type: string
            username:
              type: string
      example:
        userEmail: dennis@gmail.com
        update: { accountStatus: disable }
    permitTeacherRegistration:
      title: Permit Teacher Registration
      required:
        - email
      type: object
      properties:
        email:
          type: string
      example:
        email: aTeacher@gmail.com

  securitySchemes:
    bearer:
      type: http
      scheme: bearer


tags:
  - name: Misc
    description: ''
  - name: Auth
    description: ''
  - name: Account
    description: ''
  - name: Subject
    description: ''
  - name: Assignment
    description: ''
  - name: Dataset
    description: ''
  - name: Buffer
    description: ''
  - name: Checker
    description: ''
  - name: Result
    description: ''
  - name: Admin
    description: ''
